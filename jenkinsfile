pipeline {
    agent any

    environment {
        JAVA_HOME = '/var/lib/jenkins/jdk-17'
        PATH = "$JAVA_HOME/bin:$PATH"
        
    }

    tools {
        maven 'maven'
        dockerTool 'docker'
    }

    stages {

        stage('Install Minikube') {
            steps {
                script {
                    sh 'curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64'
                    sh 'mkdir -p /var/lib/jenkins/.local/bin/'
                    sh 'install minikube-linux-amd64 /var/lib/jenkins/.local/bin/minikube'
                    sh '/var/lib/jenkins/.local/bin/minikube start'
                    sh '/var/lib/jenkins/.local/bin/minikube status'
                    
                }
            }
        }

        stage('minikube start') {
            steps {
                script {
                    sh '/var/lib/jenkins/.local/bin/minikube start'
                    
                }
            }
        }

        
        stage('Install kubectl') {
            steps {
                script {
                    sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl'
                    sh 'chmod +x kubectl'
                    sh 'mv kubectl /var/lib/jenkins/.local/bin/'
                    sh '/var/lib/jenkins/.local/bin/kubectl version -o yaml'
                }
            }
        }

        stage('deployment '){
            steps{
                script{
                    sh '/var/lib/jenkins/.local/bin/minikube status'
                    sh '/var/lib/jenkins/.local/bin/kubectl get nodes '
                    sh '/var/lib/jenkins/.local/bin/kubectl apply -f /home/arij/Desktop/exam-devops/mongo-demo/deployment.yaml'

                }
            }
            
        }


        stage('Setup and Configure Kubernetes') {
            steps {
                script {
                    sh '/var/lib/jenkins/.local/bin/minikube start'
                    sh '/var/lib/jenkins/.local/bin/kubectl config set-context minikube --namespace=$KUBERNETES_NAMESPACE --cluster=$KUBERNETES_CLOUD --kubeconfig=$KUBE_CONFIG'
                }
            }
        }


        
        stage('Build Maven') {
            steps {
                script {
                    env.JAVA_HOME = '/var/lib/jenkins/jdk-17'
                    env.PATH = "$JAVA_HOME/bin:$PATH"
                }
                checkout scm
                sh 'mvn clean install -U'
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    // Build Docker image
                    def dockerImageName = "arijknani/springbootapp"
                    def dockerBuildStatus = sh(script: "docker build -t $dockerImageName .", returnStatus: true)
                    if (dockerBuildStatus == 0) {
                        echo 'Docker build successful!'
                    } else {
                        error 'Docker build failed!'
                    }
                }
            }
        }

        

        stage('Docker Login') {
            steps {
                script {
                    // Docker login
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        def dockerLoginStatus = sh(script: "docker login -u \$DOCKER_HUB_USERNAME -p \$DOCKER_HUB_PASSWORD docker.io", returnStatus: true)
                        if (dockerLoginStatus == 0) {
                            echo 'Docker login successful!'
                        } else {
                            error 'Docker login failed!'
                        }
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Push Docker image
                    
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        docker.image("arijknani/springbootapp").push()

                        
                    }
                }
            }
        }

        stage('Pull') {
            steps {
                script {
                    // Pull the Docker image
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        docker.image("arijknani/springbootapp").pull()
                    }
                }
            }
        }
    

        stage('Docker Compose UP') {
            steps {
                script {
                    sh 'docker-compose down'
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Deploy to Minikube
                    sh '/var/lib/jenkins/.local/bin/kubectl apply -f kubernetes/deployment.yaml'
                    minikubeIP = sh(script: 'minikube ip', returnStdout: true).trim()

                    // Get the NodePort assigned
                    def nodePort = sh(script: '/var/lib/jenkins/.local/bin/kubectl get svc service/springbootapp-service -o=jsonpath="{.spec.ports[0].nodePort}"', returnStdout: true).trim()

                    // Access the application using the Minikube IP and NodePort
                    echo "Your application is accessible at: http://${minikubeIP}:${nodePort}"
}

            }
        }




        stage('Test') {
            steps {
                script {
                    sh './mvnw test'
                }
            }
        }
    }
}
